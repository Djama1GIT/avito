// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/service/service.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	structures "avito/pkg/structures"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockSegment is a mock of Segment interface.
type MockSegment struct {
	ctrl     *gomock.Controller
	recorder *MockSegmentMockRecorder
}

// MockSegmentMockRecorder is the mock recorder for MockSegment.
type MockSegmentMockRecorder struct {
	mock *MockSegment
}

// NewMockSegment creates a new mock instance.
func NewMockSegment(ctrl *gomock.Controller) *MockSegment {
	mock := &MockSegment{ctrl: ctrl}
	mock.recorder = &MockSegmentMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSegment) EXPECT() *MockSegmentMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockSegment) Create(segment structures.Segment) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", segment)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockSegmentMockRecorder) Create(segment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockSegment)(nil).Create), segment)
}

// Delete mocks base method.
func (m *MockSegment) Delete(segment structures.Segment) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", segment)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockSegmentMockRecorder) Delete(segment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockSegment)(nil).Delete), segment)
}

// GetPercentageSegments mocks base method.
func (m *MockSegment) GetPercentageSegments() (map[string]int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPercentageSegments")
	ret0, _ := ret[0].(map[string]int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPercentageSegments indicates an expected call of GetPercentageSegments.
func (mr *MockSegmentMockRecorder) GetPercentageSegments() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPercentageSegments", reflect.TypeOf((*MockSegment)(nil).GetPercentageSegments))
}

// MockUserSegments is a mock of UserSegments interface.
type MockUserSegments struct {
	ctrl     *gomock.Controller
	recorder *MockUserSegmentsMockRecorder
}

// MockUserSegmentsMockRecorder is the mock recorder for MockUserSegments.
type MockUserSegmentsMockRecorder struct {
	mock *MockUserSegments
}

// NewMockUserSegments creates a new mock instance.
func NewMockUserSegments(ctrl *gomock.Controller) *MockUserSegments {
	mock := &MockUserSegments{ctrl: ctrl}
	mock.recorder = &MockUserSegmentsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserSegments) EXPECT() *MockUserSegmentsMockRecorder {
	return m.recorder
}

// GetSegmentUsers mocks base method.
func (m *MockUserSegments) GetSegmentUsers(segment structures.Segment) ([]int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSegmentUsers", segment)
	ret0, _ := ret[0].([]int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSegmentUsers indicates an expected call of GetSegmentUsers.
func (mr *MockUserSegmentsMockRecorder) GetSegmentUsers(segment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSegmentUsers", reflect.TypeOf((*MockUserSegments)(nil).GetSegmentUsers), segment)
}

// GetUsersInSegment mocks base method.
func (m *MockUserSegments) GetUsersInSegment(user structures.User) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsersInSegment", user)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsersInSegment indicates an expected call of GetUsersInSegment.
func (mr *MockUserSegmentsMockRecorder) GetUsersInSegment(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsersInSegment", reflect.TypeOf((*MockUserSegments)(nil).GetUsersInSegment), user)
}

// Patch mocks base method.
func (m *MockUserSegments) Patch(userSegments structures.UserSegments) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Patch", userSegments)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Patch indicates an expected call of Patch.
func (mr *MockUserSegmentsMockRecorder) Patch(userSegments interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Patch", reflect.TypeOf((*MockUserSegments)(nil).Patch), userSegments)
}

// MockUser is a mock of User interface.
type MockUser struct {
	ctrl     *gomock.Controller
	recorder *MockUserMockRecorder
}

// MockUserMockRecorder is the mock recorder for MockUser.
type MockUserMockRecorder struct {
	mock *MockUser
}

// NewMockUser creates a new mock instance.
func NewMockUser(ctrl *gomock.Controller) *MockUser {
	mock := &MockUser{ctrl: ctrl}
	mock.recorder = &MockUserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUser) EXPECT() *MockUserMockRecorder {
	return m.recorder
}

// DeleteExpiredSegments mocks base method.
func (m *MockUser) DeleteExpiredSegments() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteExpiredSegments")
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteExpiredSegments indicates an expected call of DeleteExpiredSegments.
func (mr *MockUserMockRecorder) DeleteExpiredSegments() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteExpiredSegments", reflect.TypeOf((*MockUser)(nil).DeleteExpiredSegments))
}

// GetUserHistory mocks base method.
func (m *MockUser) GetUserHistory(userHistory structures.UserHistory) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserHistory", userHistory)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserHistory indicates an expected call of GetUserHistory.
func (mr *MockUserMockRecorder) GetUserHistory(userHistory interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserHistory", reflect.TypeOf((*MockUser)(nil).GetUserHistory), userHistory)
}
